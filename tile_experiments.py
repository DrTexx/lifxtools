import numpy as np
import lifxlan
from time import sleep

max_matrix = np.array([
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535],
    [65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535]
])

hue_matrix = np.array([
    [1.0,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
    [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
])


lifx = lifxlan.LifxLAN()
tilechain = lifx.get_tilechain_lights()[0]

matrix = max_matrix * hue_matrix
print(matrix)

m_shape = matrix.shape


c = (0,65535,65535/2,6500)
c2 = (65535/2,65535,65535/2,6500)

h = np.zeros((8,16))

for y in range(m_shape[1]):
    for x in range(m_shape[0]):
        h[x][y] = max_matrix[x][y] * hue_matrix[x][y]

_matrix = np.array([
    [c,c,c,c,c,c,c2,c2,c,c,c,c,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2],
    [c,c,c2,c2,c,c,c2,c2,c,c,c2,c2,c,c,c2,c2]
])

class TileCanvas:
    def __init__(self):
        canvas_dimensions = tilechain.get_canvas_dimensions()
        self.canvas = np.zeros(canvas_dimensions)

# print(_matrix[row][col][brightness])
print(_matrix[0][2][0])
print(_matrix[0][2][1])
print(_matrix[0][2][2])

c = TileCanvas()
c.canvas = _matrix

while True:
    tilechain.project_matrix(c.canvas,0,rapid=True)
    c.canvas = np.roll(c.canvas,1,axis=0)
    c.canvas = np.roll(c.canvas,1,axis=1)
    print(c.canvas)
    sleep(1/20)
